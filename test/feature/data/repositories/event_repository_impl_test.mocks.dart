// Mocks generated by Mockito 5.4.4 from annotations
// in event_sink/test/feature/data/repositories/event_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:event_sink/src/core/data/id_generator.dart' as _i8;
import 'package:event_sink/src/core/time/time_info.dart' as _i10;
import 'package:event_sink/src/feature/data/local/data_sources/event_local_data_source.dart'
    as _i7;
import 'package:event_sink/src/feature/data/local/models/event_model.dart'
    as _i3;
import 'package:event_sink/src/feature/data/remote/data_sources/event_remote_data_source.dart'
    as _i4;
import 'package:event_sink/src/feature/data/remote/models/remote_event_model.dart'
    as _i2;
import 'package:event_sink/src/feature/data/remote/models/remote_new_event_model.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRemoteEventModel_0 extends _i1.SmartFake
    implements _i2.RemoteEventModel {
  _FakeRemoteEventModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEventModel_1 extends _i1.SmartFake implements _i3.EventModel {
  _FakeEventModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EventRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventRemoteDataSource extends _i1.Mock
    implements _i4.EventRemoteDataSource {
  MockEventRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.RemoteEventModel>> getEvents({required String? token}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEvents,
          [],
          {#token: token},
        ),
        returnValue: _i5.Future<List<_i2.RemoteEventModel>>.value(
            <_i2.RemoteEventModel>[]),
      ) as _i5.Future<List<_i2.RemoteEventModel>>);

  @override
  _i5.Future<_i2.RemoteEventModel> createEvent(
    _i6.RemoteNewEventModel? event, {
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createEvent,
          [event],
          {#token: token},
        ),
        returnValue:
            _i5.Future<_i2.RemoteEventModel>.value(_FakeRemoteEventModel_0(
          this,
          Invocation.method(
            #createEvent,
            [event],
            {#token: token},
          ),
        )),
      ) as _i5.Future<_i2.RemoteEventModel>);
}

/// A class which mocks [EventLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventLocalDataSource extends _i1.Mock
    implements _i7.EventLocalDataSource {
  MockEventLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> addEvent(_i3.EventModel? model) => (super.noSuchMethod(
        Invocation.method(
          #addEvent,
          [model],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addEvents(List<_i3.EventModel>? models) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEvents,
          [models],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> hasEvent(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #hasEvent,
          [eventId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.EventModel> getEvent(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #getEvent,
          [eventId],
        ),
        returnValue: _i5.Future<_i3.EventModel>.value(_FakeEventModel_1(
          this,
          Invocation.method(
            #getEvent,
            [eventId],
          ),
        )),
      ) as _i5.Future<_i3.EventModel>);

  @override
  _i5.Future<void> removeEvent(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #removeEvent,
          [eventId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i3.EventModel>> getAllEvents() => (super.noSuchMethod(
        Invocation.method(
          #getAllEvents,
          [],
        ),
        returnValue: _i5.Future<List<_i3.EventModel>>.value(<_i3.EventModel>[]),
      ) as _i5.Future<List<_i3.EventModel>>);

  @override
  _i5.Future<int> getPoolSize(int? poolId) => (super.noSuchMethod(
        Invocation.method(
          #getPoolSize,
          [poolId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i3.EventModel>> getPooledEvents(int? poolId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPooledEvents,
          [poolId],
        ),
        returnValue: _i5.Future<List<_i3.EventModel>>.value(<_i3.EventModel>[]),
      ) as _i5.Future<List<_i3.EventModel>>);

  @override
  _i5.Future<List<int>> getPools() => (super.noSuchMethod(
        Invocation.method(
          #getPools,
          [],
        ),
        returnValue: _i5.Future<List<int>>.value(<int>[]),
      ) as _i5.Future<List<int>>);

  @override
  _i5.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearPool(int? poolId) => (super.noSuchMethod(
        Invocation.method(
          #clearPool,
          [poolId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [IdGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockIdGenerator extends _i1.Mock implements _i8.IdGenerator {
  MockIdGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String generateId() => (super.noSuchMethod(
        Invocation.method(
          #generateId,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #generateId,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [TimeInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimeInfo extends _i1.Mock implements _i10.TimeInfo {
  MockTimeInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime now() => (super.noSuchMethod(
        Invocation.method(
          #now,
          [],
        ),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.method(
            #now,
            [],
          ),
        ),
      ) as DateTime);
}

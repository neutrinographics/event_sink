// Mocks generated by Mockito 5.3.2 from annotations
// in event_sink/test/feature/data/local/data_sources/event_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:event_sink/src/core/data/local_cache.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocalCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalCache<K, T> extends _i1.Mock implements _i2.LocalCache<K, T> {
  @override
  _i3.Future<void> write(
    K? key,
    T? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [
            key,
            data,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<T> read(K? key) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [key],
        ),
        returnValue: _i3.Future<T>.value(null),
        returnValueForMissingStub: _i3.Future<T>.value(null),
      ) as _i3.Future<T>);
  @override
  _i3.Future<bool> exists(K? key) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [key],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<List<T>> values() => (super.noSuchMethod(
        Invocation.method(
          #values,
          [],
        ),
        returnValue: _i3.Future<List<T>>.value(<T>[]),
        returnValueForMissingStub: _i3.Future<List<T>>.value(<T>[]),
      ) as _i3.Future<List<T>>);
  @override
  _i3.Future<List<K>> keys() => (super.noSuchMethod(
        Invocation.method(
          #keys,
          [],
        ),
        returnValue: _i3.Future<List<K>>.value(<K>[]),
        returnValueForMissingStub: _i3.Future<List<K>>.value(<K>[]),
      ) as _i3.Future<List<K>>);
  @override
  _i3.Future<void> delete(K? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

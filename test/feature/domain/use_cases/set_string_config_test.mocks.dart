// Mocks generated by Mockito 5.4.0 from annotations
// in event_sink/test/feature/domain/use_cases/set_string_config_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:event_sink/src/core/domain/config_options.dart' as _i6;
import 'package:event_sink/src/core/error/failure.dart' as _i5;
import 'package:event_sink/src/feature/domain/repositories/config_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConfigRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigRepository extends _i1.Mock implements _i3.ConfigRepository {
  MockConfigRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> write<T>(
    _i6.ConfigOption? option,
    T? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [
            option,
            value,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #write,
            [
              option,
              value,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, T?>> read<T>(_i6.ConfigOption? option) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [option],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, T?>>.value(
            _FakeEither_0<_i5.Failure, T?>(
          this,
          Invocation.method(
            #read,
            [option],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, T?>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, T>> require<T>(_i6.ConfigOption? option) =>
      (super.noSuchMethod(
        Invocation.method(
          #require,
          [option],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, T>>.value(
            _FakeEither_0<_i5.Failure, T>(
          this,
          Invocation.method(
            #require,
            [option],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, T>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> delete(_i6.ConfigOption? option) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [option],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #delete,
            [option],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #clear,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
